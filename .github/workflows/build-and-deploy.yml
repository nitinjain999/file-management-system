name: Test And Build
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-python-app:
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      id: Install-dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Analyse code with pylint
      id: Python-App-Linting
      run: |
        find . -name '*.py' -exec pylint {} \;
    - name: Unit Testing
      id: Testing-Python-Application
      run: |
        python tests.py

    
    - name: Python Application Build Notification
      uses: sroopsai/slack@v1.2.5
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
      if: always()
      env: 
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Python Application Build Notification 
      uses: sroopsai/slack@v1.2.5
      with: 
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL2 }}

  build-docker-app:

    runs-on: ubuntu-latest
    needs: 
      - build-python-app
    steps:
    - uses: actions/checkout@v2

    - name: Lint Dockerfile
      id: Lint-the-Dockerfile
      uses: hadolint/hadolint-action@v1.4.0
      with:
        dockerfile: Dockerfile
   

    - name: Build Docker
      id: Build-Docker-Image
      run: |
        docker build . -t filemanagerapp:latest
    
    - name: Docker Application Build Notification
      uses: sroopsai/slack@v1.2.5
      with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
      if: always()
      env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Docker Application Build Notification
      uses: sroopsai/slack@v1.2.5
      with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
      if: always()
      env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL2 }}
  
  create-azure-vm:
    runs-on: ubuntu-latest

    steps:
      - name: actions/checkout@v2
        uses: actions/checkout@v2

      - name: RunPoweshellScriptFromRepo
        env:
          SP_CLIENT_ID: ${{ secrets.SP_CLIENT_ID}}
          SP_CLIENT_SECRET: ${{ secrets.SP_CLIENT_SECRET }}
          SP_TENANT_ID: ${{ secrets.SP_TENANT_ID }}
          AZURE_SUBSCRIPTION_NAME: ${{ secrets.AZURE_SUBSCRIPTION_NAME }}        
        run: .\create-vm-.ps1
        shell: pwsh




      



    
