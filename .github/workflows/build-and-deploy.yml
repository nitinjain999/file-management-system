name: Build And Deploy
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-python-app:
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      id: Install-dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Analyse code with pylint
      id: Python-App-Linting
      run: |
        find . -name '*.py' -exec pylint {} \;
    - name: Unit Testing
      id: Testing-Python-Application
      run: |
        python tests.py

    
    - name: Python Application Build Notification
      uses: sroopsai/slack@v1.2.5
      with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
      if: always()
      env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}





  build-docker-app:

    runs-on: ubuntu-latest
    needs: 
      - build-python-app
    steps:
    - name: Checkout
      id: Checkout
      uses: actions/checkout@v2

    - name: Lint Dockerfile
      id: Lint-the-Dockerfile
      uses: hadolint/hadolint-action@v1.4.0
      with:
        dockerfile: Dockerfile
    - name: 'Login via Azure CLI'
      id: Login-To-Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build and push image'
      id: Build-And-Push-Image-Into-ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - run: |
        docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/filemanagementapp:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/filemanagementapp:${{ github.sha }}

    - name: 'Deploy to Azure Container Instances'
      id: Deploy-To-ACI
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/filemanagementapp:${{ github.sha }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: aci-filemanagementapp
        location: 'north europe'

      

    
    - name: Docker Application Build Notification
      uses: sroopsai/slack@v1.2.5
      with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
      if: always()
      env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  
        
          



      



    
